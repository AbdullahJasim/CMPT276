<div class="control">
  <h3>Search Settings: </h3>
  <table>
    <tr>
      <td></td>
      <td>Date: </td>
      <td>Popularity: </td>
      <td>Size: </td>
    </tr>
    <tr>
      <td><input type="checkbox" id="twitterCheck">Twitter</td>
      <td><input type="radio" id="dateAsc" name="date" value="ascending">Ascending</td>
      <td><input type="radio" id="popAsc" name="popularity" value="ascending">Ascending</td>
      <td><input type="radio" id="sizeAsc" name="Size" value="ascending">Ascending</td>
    </tr>
    <tr>
      <td><input type="checkbox" id="instagramCheck">Instagram</td>
      <td><input type="radio" id="dateDes" name="date" value="descending">Descending</td>
      <td><input type="radio" id="popDes" name="popularity" value="descending">Descending</td>
      <td><input type="radio" id="sizeDes" name="Size" value="descending">Descending</td>
    </tr>
    <tr>
      <td><input type="checkbox" id="googleCheck">Google+</td>
    </tr>
  </table>
  <br><br>

</div>
<canvas id="infoVis" width="800" height="800"></canvas>
<br><br>
<div id="result" class="mdl-card mdl-shadow--2dp">
  <div>
    <a onclick="close_button()"><h5 class="close-button">x</h5></a>
  </div>
	<div class="mdl-card__title mdl-card--expand">
    <a href="tobechanged" id = "imageLink" target="_blank">
      <img id="image">
    </a>
    <p id = "chosenResult"></p>
	</div>
</div>
<style>
.mdl-card {
	background-color: indigo;
  width: 400px;
  top: 100px;
  right: 50px;
  position: absolute;
  display: none;
}
.mdl-card__title {
  color: white;
}
.close-button {
  position: relative;
  margin: 5px;
  text-align: right;
  color: white;
}
.control {
  position: relative;
}
table {
  font-size: 1.5em;
}
tr, td {
  padding-top: 5px;
  padding-right: 40px;
}
</style>
<script type="text/javascript">
  function close_button() {
    document.getElementById("result").style.display = "none";
  }
</script>

<script type="text/javascript">
//Global arrays
  tweets = [];
  instagrams = [];
  googles = [];

//Global tweet max / min values
  shortestTweet = 9999999999;
  longestTweet = 0;
  oldestTweet = 9999999999;
  mostRecentTweet = 0;
  mostPopularTweet = 0;
  leastPopularTweet = 9999999999;

//Function to avoid duplicate tweet entries
  function checkIfTweetExists(element) {
    for (var i = 0; i < tweets.length; i++) {
      if (tweets[i].textvalue == element.textvalue) {
        return true;
      }
    }
    return false;
  }

//Function to change a tweet time stamp to an int value
//Format: 2015-11-28 19:48:26 UTC
  function getTweetTimeValue(time) {
    var temp;
    var sum = 0;
    temp = parseInt(time.substring(0, 4));
    sum += (temp - 2000) * 15;
    temp = parseInt(time.substring(5, 7));
    sum += (temp) * 10;
    temp = parseInt(time.substring(8, 10));
    sum += (temp) * 7;
    temp = parseInt(time.substring(11, 13));
    sum += (temp) * 4;
    temp = parseInt(time.substring(14, 16));
    sum += (temp) * 2;
    temp = parseInt(time.substring(17, 19));
    sum += temp;
    return sum;
  }

//Global google max / min values
  shortestGoogle = 9999999999;
  longestGoogle = 0;
  oldestGoogle = 9999999999;
  mostRecentGoogle = 0;
  leastPopularGoogle = 9999999999;
  mostPopularGoogle = 0;

//Function to change a google+ time stamp to an int value
//Format: 2015-11-28T18:33:10.896Z
  function getGoogleTimeValue(time) {
    var temp;
    var sum = 0;
    var temp = parseInt(time.substring(0, 4));
    sum += (temp - 2000) * 15;
    var temp = parseInt(time.substring(5, 7));
    sum += (temp) * 10;
    var temp = parseInt(time.substring(8, 10));
    sum += (temp) * 7;
    var temp = parseInt(time.substring(11, 13));
    sum += (temp) * 4;
    var temp = parseInt(time.substring(14, 16));
    sum += (temp) * 2;
    var temp = parseInt(time.substring(17, 19));
    sum += temp;
    return sum;
  }

//Global instagram max / min values
  smallestInstagram = 9999999999;
  largestInstagram = 0;
  oldestInstagram = 9999999999;
  mostRecentInstagram = 0;
  leastPopularInstagram = 9999999999;
  mostPopularInstagram = 0;

//Function to change the instagram time stamp to an int value
//Format: 1279340983
  function getInstagramTimeValue(time) {
    var date = new Date (parseInt(time) * 1000);
    var temp = date.getYear();
    var sum = 0;
    temp += 1900;
    sum += (temp - 2000) * 15;
    temp = date.getMonth();
    sum += (temp) * 10;
    temp = date.getDay();
    sum += (temp) * 7;
    temp = date.getHours();
    sum += (temp) * 4;
    temp = date.getMinutes();
    sum += (temp) * 2;
    temp = date.getSeconds();
    sum += temp;

    return sum;
  }
  </script>

<% provide(:title, 'Search') %>
<%= button_tag "Send results to my email" %>
<script>
$("button").click(function() {
  $.ajax({
    type: "POST",
    url: "/mailresults",
    success: function(data) {
      if (data.status == "404")
        alert(data.error);
      else
        alert("Email sent.");
    }
  });
});
</script>

<% no_results = true %>


<% if !@googleplus.items.nil? %>
  <% no_results = false %>
  <% @googleplus.items.each do |google| %>
    <script type="text/javascript">
      var canvas = document.getElementById("infoVis");
      var ctx = canvas.getContext("2d");

//Creating a google
      var google = new Object();
      var time = ("<%= (google.published) %>");
      var text = ("<%= escape_javascript (google.object.content) %>");
      google.time = getGoogleTimeValue(time);
      google.popularity = ("<%= (google.object.plusoners.total_items) %>") + ("<%= (google.object.resharers.total_items) %>");
      google.textValue = text;
      google.textLength = (text.length) / 50;
      google.radius = google.textLength;
      google.hit = false;
      google.hovered = false;
      google.x = google.textLength;
      google.y = google.textLength;

//Update the global min / max values
      if (google.textLength < shortestGoogle) {
        shortestGoogle = google.textLength;
      } else if (google.textLength > longestGoogle) {
        longestGoogle = google.textLength;
      }

      if (google.time < oldestGoogle) {
        oldestGoogle = google.time;
      } else if (google.time > mostRecentGoogle) {
        mostRecentGoogle = google.time;
      }

      if (google.popularity < leastPopularGoogle) {
        leastPopularGoogle = google.popularity;
      } else if (google.popularity > mostPopularGoogle) {
        mostPopularGoogle = google.popularity;
      }

      googles.push(google);
    </script>
  <% end %>
<% end %>

<% tweet_count = 0 %>
<% @twitter.each do |tweet| %>
    <% tweet_count = tweet_count + 1 %>
<% end %>

<% if tweet_count != 0 %>
  <% no_results = false %>
  <% tweet_count = 0 %>
  <% @twitter.each do |tweet| %>
    <script type="text/javascript">
      var canvas = document.getElementById("infoVis");
      var ctx = canvas.getContext("2d");

//Creating a tweet
      var tweet = new Object();
      var time = ("<%= (tweet.created_at) %>");
      var text = ("<%= escape_javascript (tweet.text) %>");
      tweet.time = getTweetTimeValue(time);
      tweet.popularity = parseInt("<%= (tweet.favorite_count) %>") + parseInt("<%= (tweet.retweet_count) %>");
      tweet.textvalue = text;
      tweet.textlength = (text.length) / 10;
      tweet.radius = tweet.textlength;
      tweet.hit = false;
      tweet.hovered = false;
      tweet.x = tweet.textlength;
      tweet.y = tweet.textlength;

//If we're adding the tweet to the array, update the points of the spectrum for length, date and popularity
      if (checkIfTweetExists(tweet) == false) {
        if (tweet.textlength < shortestTweet) {
          shortestTweet = tweet.textlength;
        } else if(tweet.textlength > longestTweet) {
          longestTweet = tweet.textlength;
        }

        if (tweet.time < oldestTweet) {
          oldestTweet = tweet.time;
        } else if (tweet.time > mostRecentTweet) {
          mostRecentTweet = tweet.time;
        }

        if (tweet.popularity < leastPopularTweet) {
          leastPopularTweet = tweet.popularity;
        } else if (tweet.popularity > mostPopularTweet) {
          mostPopularTweet = tweet.popularity;
        }

        tweets.push(tweet);
      }
    </script>
  <% end %>
  <h5> The tweets had a tendency to be:
  <% if @tweet_sentiment.inject{ |sum, el| sum + el }.to_f / @tweet_sentiment.size > 0%>
    <%= 'Positive' %>
  <% elsif @tweet_sentiment.inject{ |sum, el| sum + el }.to_f / @tweet_sentiment.size < 0%>
    <%= 'Negative' %>
  <% else %>
    <%= 'Neutral' %>
  <%end%>
</h5>
<% end %>

<% if !@instagram.nil? %>
 <% no_results = false %>
 <% @instagram.each do |inst| %>
   <script type="text/javascript">
     var canvas = document.getElementById("infoVis");
     var ctx = canvas.getContext("2d");

//Creating an instagram
     var instagram = new Object();
     var time = ("<%= inst.created_time %>");
     instagram.time = getInstagramTimeValue(time);
     instagram.popularity = parseInt("<%= inst.likes[:count] %>"); //count is a reserved word, so we have to use a nested notation instead
     instagram.imageSize = ("<%= inst.images.standard_resolution.width %>") * ("<%= inst.images.standard_resolution.height %>");
     instagram.imageURL = ("<%= inst.images.thumbnail.url %>");
     instagram.radius = instagram.imageSize / 100;
     instagram.hit = false;
     instagram.hovered = false;
     instagram.x = 0;
     instagram.y = 0;
     instagram.picLink = ("<%= inst.link %>");

//Update the global min / max values
     if (instagram.imageSize < smallestInstagram) {
       smallestInstagram = instagram.imageSize;
     } else if (instagram.imageSize > largestInstagram) {
       largestInstagram = instagram.imageSize;
     }

     if (instagram.time < oldestInstagram) {
       oldestInstagram = instagram.time;
     } else if (instagram.time > mostRecentInstagram) {
       mostRecentInstagram = instagram.time;
     }

     if (instagram.popularity < leastPopularInstagram) {
       leastPopularInstagram = instagram.popularity;
     } else if (instagram.popularity > mostPopularInstagram) {
       mostPopularInstagram = instagram.popularity;
     }

     instagrams.push(instagram);
   </script>
 <% end %>
<% end %>

<% if no_results %>
  <h1> Your search for:</h1>
    <h2><%= @query %></h2>
  <h1>returned no results</h1>
<% end %>

<script type="text/javascript">
  document.getElementById("dateAsc").checked = true;
  document.getElementById("popAsc").checked = true;
  document.getElementById("sizeAsc").checked = true;

//Update the google relative attributes
  updateGoogleTimes("ascending");
  updateGoogleLengths("ascending");
  updateGooglePopularity("ascending");
  updateGooglesY("date");
  updateGooglesX("popularity");
  if (document.getElementById("googleCheck").checked) {drawGoogles(); }

//Update the instagram relative attributes
  updateInstagramTimes("ascending");
  updateInstagramLengths("ascending");
  updateInstagramPopularity("ascending");
  updateInstagramsY("date");
  updateInstagramsX("popularity");
  if (document.getElementById("instagramCheck").checked) {drawInstagrams(); }

//Update the tweet relative attributes
  updateTweetTimes("ascending");
  updateTweetLengths("ascending");
  updateTweetPopularity("ascending");
  updateTweetsY("date");
  updateTweetsX("popularity");
  if (document.getElementById("twitterCheck").checked) {drawTweets(); }

  var canvas = document.getElementById("infoVis");
  var ctx = canvas.getContext("2d");
  var rect = canvas.getBoundingClientRect();

//Hovering funcionality for all nodes
  canvas.addEventListener("mousemove", function(event) {
//Calculate the X and Y positions of the mouse
    var mouseX = event.clientX - rect.left;
    var mouseY = event.clientY - rect.top + document.body.scrollTop;
    var hoveredPoint;
    var clickedPoint;

//Google+ functionality
    if (document.getElementById("googleCheck").checked) {
      for (var i = 0; i < googles.length; i++) {
        if (googles[i].hit) { clickedPoint = googles[i];}

        if (mouseX > googles[i].x - (googles[i].radius) && mouseX < googles[i].x + (googles[i].radius) && mouseY > googles[i].y - (googles[i].radius) && mouseY < googles[i].y + (googles[i].radius) && googles[i].hit == false) {
          if (checkIfCanSelect(googles[i], mouseX, mouseY)) {
            googles[i].hovered = true;
            hoveredPoint = googles[i];
          }
        } else if (googles[i].hit == false) { googles[i].hovered = false; drawPoint(googles[i], '#ff4d4d', '#990000');}
      }
    }

//Instagram functionality
    if (document.getElementById("instagramCheck").checked) {
      for (var i = 0; i < instagrams.length; i++) {
        if (instagrams[i].hit) { clickedPoint = instagrams[i];}

        if (mouseX > instagrams[i].x - (instagrams[i].radius) && mouseX < instagrams[i].x + (instagrams[i].radius) && mouseY > instagrams[i].y - (instagrams[i].radius) && mouseY < instagrams[i].y + (instagrams[i].radius) && instagrams[i].hit == false) {
          if (checkIfCanSelect(instagrams[i], mouseX, mouseY)) {
            instagrams[i].hovered = true;
            hoveredPoint = instagrams[i];
          }
        } else if (instagrams[i].hit == false) { instagrams[i].hovered = false; drawPoint(instagrams[i], '#ffeb99', '#b38f00');}
      }
    }

//Tweets functionality
    if (document.getElementById("twitterCheck").checked) {
      for (var i = 0; i < tweets.length; i++) {
        if (tweets[i].hit) { clickedPoint = tweets[i];}

        if (mouseX > tweets[i].x - (tweets[i].radius) && mouseX < tweets[i].x + (tweets[i].radius) && mouseY > tweets[i].y - (tweets[i].radius) && mouseY < tweets[i].y + (tweets[i].radius) && tweets[i].hit == false) {
          if (checkIfCanSelect(tweets[i], mouseX, mouseY)) {
            tweets[i].hovered = true;
            hoveredPoint = tweets[i];
          }
        } else if (tweets[i].hit == false) { tweets[i].hovered = false; drawPoint(tweets[i], '#00c0ff', '#006080');}
      }
    }

    if (hoveredPoint != null) { drawPoint(hoveredPoint, '#ff944d', '#006080');}
    if (clickedPoint != null) { drawPoint(clickedPoint, '#00cc00', '#004d00');}
  });

//Clicking functionality to show that the node is active and to display information
  canvas.addEventListener("click", function(event) {
    var oneHit = false;
    var clickedPoint;
    var mouseX = event.clientX - rect.left;
    var mouseY = event.clientY - rect.top + document.body.scrollTop;

//Google+ functionality
    if (document.getElementById("googleCheck").checked) {
      for (var i = 0; i < googles.length; i++) {
        if (mouseX > googles[i].x - (googles[i].radius) && mouseX < googles[i].x + (googles[i].radius) && mouseY > googles[i].y - (googles[i].radius) && mouseY < googles[i].y + (googles[i].radius) && googles[i].hovered) {
          googles[i].hit = true;
          oneHit = true;
          document.getElementById("chosenResult").innerHTML = googles[i].textValue;
          document.getElementById("image").src = "";
          document.getElementById('imageLink').href = "";
          clickedPoint = googles[i];
        } else { googles[i].hit = false;}
      }
    }

//Instagram functionality
    if (document.getElementById("instagramCheck").checked) {
      for (var i = 0; i < instagrams.length; i++) {
        if (mouseX > instagrams[i].x - (instagrams[i].radius) && mouseX < instagrams[i].x + (instagrams[i].radius) && mouseY > instagrams[i].y - (instagrams[i].radius) && mouseY < instagrams[i].y + (instagrams[i].radius) && instagrams[i].hovered) {
          instagrams[i].hit = true;
          oneHit = true;
          document.getElementById("chosenResult").innerHTML = "";
          document.getElementById("image").src = instagrams[i].imageURL;
          document.getElementById('imageLink').href = instagrams[i].picLink;
          clickedPoint = instagrams[i];
        } else { instagrams[i].hit = false;}
      }
    }

//Tweets functionality
    if (document.getElementById("twitterCheck").checked) {
      for (var i = 0; i < tweets.length; i++) {
        if (mouseX > tweets[i].x - (tweets[i].radius) && mouseX < tweets[i].x + (tweets[i].radius) && mouseY > tweets[i].y - (tweets[i].radius) && mouseY < tweets[i].y + (tweets[i].radius) && tweets[i].hovered) {
          tweets[i].hit = true;
          oneHit = true;
          link_text = tweets[i].textvalue.split(/\s+/);
          for (var j = 0; j <  link_text.length; j++){
            if( link_text[j].indexOf('https://t.co') >= 0) {
              link_text[j] = '<a href =' +'"' + link_text[j] + '"' + ' target="_blank">'+link_text[j]+'</a>';
            }
          }
          document.getElementById("chosenResult").innerHTML = link_text.join(' ');
          document.getElementById("image").src = "";
          document.getElementById('imageLink').href = "";
          clickedPoint = tweets[i];
        } else { tweets[i].hit = false;}
      }
    }

    if (clickedPoint != null) { drawPoint(clickedPoint, '#00cc00', '#004d00');}
    if (oneHit == false) { document.getElementById("chosenResult").innerHTML = "";}
    if (oneHit == false) {
      document.getElementById("chosenResult").innerHTML = "";
      document.getElementById("result").style.display = "none";
    } else { document.getElementById("result").style.display = "block"; }
  });

//Function to make sure only one node is highlighted / chosen at once
  function checkIfCanSelect(point, mouseX, mouseY) {
    var x1, x2;
    var y1, y2;
    var dist1, dist2;

    x1 = mouseX - point.x;
    y1 = mouseY - point.y;
    x1 = x1 * x1;
    y1 = y1 * y1;

    dist1 = Math.sqrt(x1 + y1);

    for (var i = 0; i < tweets.length; i++) {
      if (tweets[i].hovered && point != tweets[i]) {
        x2 = mouseX - tweets[i].x;
        y2 = mouseY - tweets[i].y;
        x2 = x2 * x2;
        y2 = y2 * y2;
        dist2 = Math.sqrt(x2 + y2);

        if (dist2 < dist1) { return false;
        } else { tweets[i].hovered = false; drawPoint(tweets[i], '#00c0ff', '#006080');}
      }
    }

    for (var i = 0; i < googles.length; i++) {
      if (googles[i].hovered && point != googles[i]) {
        x2 = mouseX - googles[i].x;
        y2 = mouseY - googles[i].y;
        x2 = x2 * x2;
        y2 = y2 * y2;
        dist2 = Math.sqrt(x2 + y2);

        if (dist2 < dist1) { return false;
        } else { googles[i].hovered = false; drawPoint(googles[i], '#ff4d4d', '#990000')}
      }
    }

    for (var i = 0; i < instagrams.length; i++) {
      if (instagrams[i].hovered && point != instagrams[i]) {
        x2 = mouseX - instagrams[i].x;
        y2 = mouseY - instagrams[i].y;
        x2 = x2 * x2;
        y2 = y2 * y2;
        dist2 = Math.sqrt(x2 + y2);

        if (dist2 < dist1) { return false;
        } else { instagrams[i].hovered = false; drawPoint(instagrams[i], '#ffeb99', '#b38f00');}
      }
    }

    return true;
  }

//TWITTER
  function drawTweets() { for (var i = 0; i < tweets.length; i++) { drawPoint(tweets[i], '#00c0ff', '#006080');}}

  function updateTweetTimes(sorting) {
    if (sorting == "ascending") {
      for (var i = 0; i < tweets.length; i++) {
        tweets[i].updatedTime = (tweets[i].time - oldestTweet) * 10;
        tweets[i].updatedTime += 30;
      }
    } else {
      for (var i = 0; i < tweets.length; i++) {
        tweets[i].updatedTime = (mostRecentTweet - tweets[i].time) * 10;
        tweets[i].updatedTime += 30;
      }
    }
  }

  function updateTweetLengths(sorting) {
    if (sorting == "ascending") {
      for (var i = 0; i < tweets.length; i++) {
        tweets[i].updatedTextlength = (tweets[i].textlength - shortestTweet) * 30;
        tweets[i].radius = 10;
        tweets[i].radius += tweets[i].updatedTextlength / 15;
      }
    } else {
      for (var i = 0; i < tweets.length; i++) {
        tweets[i].updatedTextlength = (longestTweet - tweets[i].textlength) * 30;
        tweets[i].radius = 10;
        tweets[i].radius += tweets[i].updatedTextlength / 15;
      }
    }
  }

  function updateTweetPopularity(sorting) {
    if (sorting == "ascending") {
      for (var i = 0; i < tweets.length; i++) {
        tweets[i].updatedPopularity = (tweets[i].popularity - leastPopularTweet) * 30;
      }
    } else {
      for (var i = 0; i < tweets.length; i++) {
        tweets[i].updatedPopularity = (mostPopularTweet - tweets[i].popularity) * 30;
      }
    }
  }

  function updateTweetsX(type) {
    if (type == "date") {
      for (var i = 0; i < tweets.length; i++) {
        tweets[i].x = tweets[i].updatedTime + tweets[i].radius + 5;
        if (tweets[i].x + tweets[i].radius + 5 > canvas.width) { tweets[i].x = canvas.width - tweets[i].radius - 5;
        } else if (tweets[i].x - tweets[i].radius - 5 < 0) { tweets[i].x = tweets[i].updatedTime + tweets[i].radius + 5;}
      }
    } else if (type == "popularity") {
      for (var i = 0; i < tweets.length; i++) {
        tweets[i].x = tweets[i].updatedPopularity + tweets[i].radius + 5;
        if (tweets[i].x + tweets[i].radius + 5 > canvas.width) { tweets[i].x = canvas.width - tweets[i].radius - 5;
        } else if (tweets[i].x - tweets[i].radius - 5 < 0) { tweets[i].x = tweets[i].updatedPopularity + tweets[i].radius + 5;}
      }
    } else if (type == "size") {
      for (var i = 0; i < tweets.length; i++) {
        tweets[i].x = tweets[i].updatedTextLength + tweets[i].radius + 5;
        if (tweets[i].x + tweets[i].radius + 5 > canvas.width) { tweets[i].x = canvas.width - tweets[i].radius - 5;
        } else if (tweets[i].x - tweets[i].radius - 5 < 0) { tweets[i].x = tweets[i].updatedTextLength + tweets[i].radius + 5;}
      }
    }
  }

  function updateTweetsY(type) {
    if (type == "date") {
      for (var i = 0; i < tweets.length; i++) {
        tweets[i].y = tweets[i].updatedTime + tweets[i].radius + 5;
        if (tweets[i].y - tweets[i].radius + 5 > canvas.height) { tweets[i].y = canvas.height - tweets[i].radius - 5;}
      }
    } else if (type == "popularity") {
      for (var i = 0; i < tweets.length; i++) {
        tweets[i].y = tweets[i].updatedPopularity + tweets[i].radius + 5;
        if (tweets[i].y - tweets[i].radius + 5 > canvas.height) { tweets[i].y = canvas.height - tweets[i].radius - 5;}
      }
    } else if (type == "size") {
      for (var i = 0; i < tweets.length; i++) {
        tweets[i].y = tweets[i].updatedTextlength + tweets[i].radius + 5;
        if (tweets[i].y - tweets[i].radius + 5 > canvas.height) { tweets[i].y = canvas.height - tweets[i].radius - 5;}
      }
    }
  }

//GOOGLEPLUS
  function drawGoogles() {
    for (var i = 0; i < googles.length; i++) { drawPoint(googles[i], '#ff4d4d', '#990000');}
  }

  function updateGoogleTimes(sorting) {
    if (sorting == "ascending") {
      for (var i = 0; i < googles.length; i++) {
        googles[i].updatedTime = (googles[i].time - oldestGoogle) * 3.5;
      }
    } else {
      for (var i = 0; i < googles.length; i++) {
        googles[i].updatedTime = (mostRecentGoogle - googles[i].time) * 3.5;
      }
    }
  }

  function updateGoogleLengths(sorting) {
    if (sorting == "ascending") {
      for (var i = 0; i < googles.length; i++) {
        googles[i].updatedTextLength = (googles[i].textLength - shortestGoogle) * 30;
        googles[i].radius = 10;
        googles[i].radius += googles[i].updatedTextLength / 150;
      }
    } else {
      for (var i = 0; i < googles.length; i++) {
        googles[i].updatedTextLength = (longestGoogle - googles[i].textLength) * 30;
        googles[i].radius = 10;
        googles[i].radius += googles[i].updatedTextLength / 150;
      }
    }
  }

  function updateGooglePopularity(sorting) {
    if (sorting == "ascending") {
      for (var i = 0; i < googles.length; i++) {
        googles[i].updatedPopularity = (googles[i].popularity - leastPopularGoogle);
      }
    } else {
      for (var i = 0; i < googles.length; i++) {
        googles[i].updatedPopularity = (mostPopularGoogle - googles[i].popularity);
      }
    }
  }

  function updateGooglesX(type) {
    if (type == "date") {
      for (var i = 0; i < googles.length; i++) {
        googles[i].x = googles[i].updatedTime + googles[i].radius + 5;
        if (googles[i].x + googles[i].radius + 5 > canvas.width) { googles[i].x = canvas.width - googles[i].radius - 5;
        } else if (googles[i].x - googles[i].radius - 5 < 0) { googles[i].x = googles[i].updatedTime + googles[i].radius + 5;}
      }
    } else if (type == "popularity") {
      for (var i = 0; i < googles.length; i++) {
        googles[i].x = googles[i].updatedPopularity + googles[i].radius + 5;
        if (googles[i].x + googles[i].radius + 5 > canvas.width) { googles[i].x = canvas.width - googles[i].radius - 5;
        } else if (googles[i].x - googles[i].radius - 5 < 0) { googles[i].x = googles[i].updatedPopularity + googles[i].radius + 5;}
      }
    } else if (type == "size") {
      for (var i = 0; i < googles.length; i++) {
        googles[i].x = googles[i].updatedTextLength + googles[i].radius + 5;
        if (googles[i].x + googles[i].radius + 5 > canvas.width) { googles[i].x = canvas.width - googles[i].radius - 5;
        } else if (googles[i].x - googles[i].radius - 5 < 0) { googles[i].x = googles[i].updatedTextLength + googles[i].radius + 5;}
      }
    }
  }

  function updateGooglesY(type) {
    if (type == "date") {
      for (var i = 0; i < googles.length; i++) {
        googles[i].y = googles[i].updatedTime;
        if (googles[i].y + googles[i].radius + 5 > canvas.height) { googles[i].y = canvas.height - googles[i].radius - 5;
        } else if (googles[i].y - googles[i].radius - 5 < 0) { googles[i].y = googles[i].updatedTime + googles[i].radius + 5;}
      }
    } else if (type == "popularity") {
      for (var i = 0; i < googles.length; i++) {
        googles[i].y = googles[i].updatedPopularity;
        if (googles[i].y + googles[i].radius + 5 > canvas.height) { googles[i].y = canvas.height - googles[i].radius - 5;
        } else if (googles[i].y - googles[i].radius - 5 < 0) { googles[i].y = googles[i].updatedPopularity + googles[i].radius + 5;}
      }
    } else if (type == "size") {
      for (var i = 0; i < googles.length; i++) {
        googles[i].y = googles[i].updatedTextLength;
        if (googles[i].y + googles[i].radius + 5 > canvas.height) { googles[i].y = canvas.height - googles[i].radius - 5;
        } else if (googles[i].y - googles[i].radius - 5 < 0) { googles[i].y = googles[i].updatedTextLength + googles[i].radius + 5;}
      }
    }
  }

//INSTAGRAM
  function drawInstagrams() {
    for (var i = 0; i < instagrams.length; i++) { drawPoint(instagrams[i], '#ffeb99', '#b38f00');}
  }

  function updateInstagramTimes(sorting) {
    if (sorting == "ascending") {
      for (var i = 0; i < instagrams.length; i++) {
        instagrams[i].updatedTime = (instagrams[i].time - oldestInstagram) * 3.5;
        instagrams[i].updatedTime += 30;
      }
    } else {
      for (var i = 0; i < instagrams.length; i++) {
        instagrams[i].updatedTime = (mostRecentInstagram - instagrams[i].time) * 3.5;
        instagrams[i].updatedTime += 30;
      }
    }
  }

  function updateInstagramLengths(sorting) {
    if (sorting == "ascending") {
      for (var i = 0; i < instagrams.length; i++) {
        instagrams[i].updatedImageSize = (instagrams[i].imageSize - smallestInstagram) * 30;
        instagrams[i].radius = 10;
        instagrams[i].radius += instagrams[i].updatedImageSize / 250000;
      }
    } else {
      for (var i = 0; i < instagrams.length; i++) {
        instagrams[i].updatedImageSize = (largestInstagram - instagrams[i].imageSize) * 30;
        instagrams[i].radius = 10;
        instagrams[i].radius += instagrams[i].updatedImageSize / 250000;
      }
    }
  }

  function updateInstagramPopularity(sorting) {
    if (sorting == "ascending") {
      for (var i = 0; i < instagrams.length; i++) {
        instagrams[i].updatedPopularity = (instagrams[i].popularity - leastPopularInstagram);
        instagrams[i].updatedPopularity = instagrams[i].updatedPopularity / 10000;
      }
    } else {
      for (var i = 0; i < instagrams.length; i++) {
        instagrams[i].updatedPopularity = (mostPopularInstagram - instagrams[i].popularity);
        instagrams[i].updatedPopularity = instagrams[i].updatedPopularity / 10000;
      }
    }
  }

  function updateInstagramsX(type) {
    if (type == "date") {
      for (var i = 0; i < instagrams.length; i++) {
        instagrams[i].x = instagrams[i].updatedTime + instagrams[i].radius + 5;
        if (instagrams[i].x + instagrams[i].radius + 5 > canvas.width) { instagrams[i].x = canvas.width - instagrams[i].radius - 5;
        } else if (instagrams[i].x - instagrams[i].radius - 5 < 0) { instagrams[i].x = instagrams[i].updatedTime + instagrams[i].radius + 5;}
      }
    } else if (type == "popularity") {
      for (var i = 0; i < instagrams.length; i++) {
        instagrams[i].x = instagrams[i].updatedPopularity + instagrams[i].radius + 5;
        if (instagrams[i].x + instagrams[i].radius + 5 > canvas.width) { instagrams[i].x = canvas.width - instagrams[i].radius - 5;
        } else if (instagrams[i].x - instagrams[i].radius - 5 < 0) { instagrams[i].x = instagrams[i].updatedPopularity + instagrams[i].radius + 5;}
      }
    } else if (type == "size") {
      for (var i = 0; i < instagrams.length; i++) {
        instagrams[i].x = instagrams[i].updatedImageSize + instagrams[i].radius + 5;
        if (instagrams[i].x + instagrams[i].radius + 5 > canvas.width) { instagrams[i].x = canvas.width - googles[i].radius - 5;
        } else if (instagrams[i].x - instagrams[i].radius - 5 < 0) { instagrams[i].x = instagrams[i].updatedImageSize + instagrams[i].radius + 5;}
      }
    }
  }

  function updateInstagramsY(type) {
    if (type == "date") {
      for (var i = 0; i < instagrams.length; i++) {
        instagrams[i].y = instagrams[i].updatedTime;
        if (instagrams[i].y + instagrams[i].radius + 5 > canvas.height) { instagrams[i].y = canvas.height - instagrams[i].radius - 5;
        } else if (instagrams[i].y - instagrams[i].radius - 5 < 0) { instagrams[i].y = instagrams[i].updatedTime + instagrams[i].radius + 5;}
      }
    } else if (type == "popularity") {
      for (var i = 0; i < instagrams.length; i++) {
        instagrams[i].y = instagrams[i].updatedPopularity;
        if (instagrams[i].y + instagrams[i].radius + 5 > canvas.height) { instagrams[i].y = canvas.height - instagrams[i].radius - 5;
        } else if (instagrams[i].y - instagrams[i].radius - 5 < 0) { instagrams[i].y = instagrams[i].updatedPopularity + instagrams[i].radius + 5;}
      }
    } else if (type == "size") {
      for (var i = 0; i < instagrams.length; i++) {
        instagrams[i].y = instagrams[i].updatedTextLength;
        if (instagrams[i].y + instagrams[i].radius + 5 > canvas.height) { instagrams[i].y = canvas.height - instagrams[i].radius - 5;
        } else if (instagrams[i].y - instagrams[i].radius - 5 < 0) { instagrams[i].y = googles[i].updatedImageSize + instagrams[i].radius + 5;}
      }
    }
  }

//Function to draw any point
  function drawPoint(point, fillColor, strokeColor) {
    ctx.fillStyle = fillColor;
    ctx.strokeStyle = strokeColor;
    ctx.globalAlpha = 0.4;
    ctx.beginPath();
    ctx.arc(point.x, point.y, point.radius, 0, 2 * Math.PI, false);
    ctx.fill();
    ctx.lineWidth = 1;
    ctx.stroke();
  }

//Control functions
  document.getElementById("twitterCheck").addEventListener('change', redraw);
  document.getElementById("instagramCheck").addEventListener('change', redraw);
  document.getElementById("googleCheck").addEventListener('change', redraw);

  document.getElementById("dateAsc").addEventListener('change', redraw);
  document.getElementById("dateDes").addEventListener('change', redraw);
  document.getElementById("popAsc").addEventListener('change', redraw);
  document.getElementById("popDes").addEventListener('change', redraw);
  document.getElementById("sizeAsc").addEventListener('change', redraw);
  document.getElementById("sizeDes").addEventListener('change', redraw);

//Redraw function, called each time an update in controls happens
  function redraw() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);

    if (document.getElementById("dateAsc").checked) {
      updateTweetTimes("ascending");
      updateGoogleTimes("ascending");
      updateInstagramTimes("ascending");
    } else {
      updateTweetTimes("descending");
      updateGoogleTimes("descending");
      updateInstagramTimes("descending");
    }

    if (document.getElementById("popAsc").checked) {
      updateInstagramPopularity("ascending");
      updateGooglePopularity("ascending");
      updateTweetPopularity("ascending");
    } else {
      updateInstagramPopularity("descending");
      updateGooglePopularity("descending");
      updateTweetPopularity("descending");
    }

    if (document.getElementById("sizeAsc").checked) {
      updateTweetLengths("ascending");
      updateGoogleLengths("ascending");
      updateInstagramLengths("ascending");
    } else {
      updateTweetLengths("descending");
      updateGoogleLengths("descending");
      updateInstagramLengths("descending");
    }

    if (document.getElementById("googleCheck").checked) {
      updateGooglesY("date");
      updateGooglesX("popularity");
      drawGoogles();
    }

    if (document.getElementById("instagramCheck").checked) {
      updateInstagramsY("date");
      updateInstagramsX("popularity");
      drawInstagrams();
    }

    if (document.getElementById("twitterCheck").checked) {
      updateTweetsY("date");
      updateTweetsX("popularity");
      drawTweets();
    }
  }
</script>

<% if @freq_search_option  && @current_user.memberType == "Paid" %>
 <h1>Frequent Patterns</h1>
 <%if !@freq_words.nil? %>
  <%@freq_words.each do |p| %>
    <%= form_tag("/search", method: "get") do%>
      <h5><%=p%>
      <%=hidden_field_tag "q", p%>
      <%=hidden_field_tag "freq_words", 1%>
      <%= button_tag "Quick Search", class: "mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent", id: "quick_search" %>
      </h5>
    <%end%>
  <%end%>
<%end%>

<% end %>
